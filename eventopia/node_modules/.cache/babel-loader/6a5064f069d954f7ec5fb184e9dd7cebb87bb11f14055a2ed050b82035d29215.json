{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Downloads\\\\event\\\\eventopia\\\\src\\\\context\\\\AuthContext.jsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  // Initialize auth state\n  useEffect(() => {\n    const checkAuthState = async () => {\n      try {\n        // Check if user is already logged in (from localStorage, API, etc.)\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n          setUser(JSON.parse(storedUser));\n        }\n      } catch (error) {\n        console.error('Error checking auth state:', error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthState();\n  }, []);\n  const login = async credentials => {\n    try {\n      setLoading(true);\n      // Replace with your actual login API call\n      const response = await fetch('/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(credentials)\n      });\n      if (response.ok) {\n        const userData = await response.json();\n        setUser(userData);\n        localStorage.setItem('user', JSON.stringify(userData));\n        return {\n          success: true,\n          user: userData\n        };\n      } else {\n        throw new Error('Login failed');\n      }\n    } catch (error) {\n      console.error('Login error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n  const register = async userData => {\n    try {\n      setLoading(true);\n      // Replace with your actual register API call\n      const response = await fetch('/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(userData)\n      });\n      if (response.ok) {\n        const newUser = await response.json();\n        setUser(newUser);\n        localStorage.setItem('user', JSON.stringify(newUser));\n        return {\n          success: true,\n          user: newUser\n        };\n      } else {\n        throw new Error('Registration failed');\n      }\n    } catch (error) {\n      console.error('Registration error:', error);\n      return {\n        success: false,\n        error: error.message\n      };\n    } finally {\n      setLoading(false);\n    }\n  };\n  const value = {\n    user,\n    login,\n    logout,\n    register,\n    loading,\n    isAuthenticated: !!user\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 107,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","checkAuthState","storedUser","localStorage","getItem","JSON","parse","error","console","login","credentials","response","fetch","method","headers","body","stringify","ok","userData","json","setItem","success","message","logout","removeItem","register","newUser","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/user/Downloads/event/eventopia/src/context/AuthContext.jsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Initialize auth state\r\n  useEffect(() => {\r\n    const checkAuthState = async () => {\r\n      try {\r\n        // Check if user is already logged in (from localStorage, API, etc.)\r\n        const storedUser = localStorage.getItem('user');\r\n        if (storedUser) {\r\n          setUser(JSON.parse(storedUser));\r\n        }\r\n      } catch (error) {\r\n        console.error('Error checking auth state:', error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuthState();\r\n  }, []);\r\n\r\n  const login = async (credentials) => {\r\n    try {\r\n      setLoading(true);\r\n      // Replace with your actual login API call\r\n      const response = await fetch('/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(credentials),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const userData = await response.json();\r\n        setUser(userData);\r\n        localStorage.setItem('user', JSON.stringify(userData));\r\n        return { success: true, user: userData };\r\n      } else {\r\n        throw new Error('Login failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Login error:', error);\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('user');\r\n  };\r\n\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      // Replace with your actual register API call\r\n      const response = await fetch('/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(userData),\r\n      });\r\n\r\n      if (response.ok) {\r\n        const newUser = await response.json();\r\n        setUser(newUser);\r\n        localStorage.setItem('user', JSON.stringify(newUser));\r\n        return { success: true, user: newUser };\r\n      } else {\r\n        throw new Error('Registration failed');\r\n      }\r\n    } catch (error) {\r\n      console.error('Registration error:', error);\r\n      return { success: false, error: error.message };\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const value = {\r\n    user,\r\n    login,\r\n    logout,\r\n    register,\r\n    loading,\r\n    isAuthenticated: !!user,\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport default AuthContext;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}